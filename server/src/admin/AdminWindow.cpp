#include "AdminWindow.h"
#include "DashboardWidget.h"
// #include "UserManagerWidget.h"
// #include "SystemConfigWidget.h"
// #include "LogViewerWidget.h"
// #include "MonitorWidget.h"
#include "../database/Database.h"
#include "../core/ChatServer.h"
#include "../config/ServerConfig.h"
#include "../utils/LogManager.h"
#include "../utils/StackTraceLogger.h"

#include <QTabWidget>
#include <QMenuBar>
#include <QStatusBar>
#include <QLabel>
#include <QAction>
#include <QMenu>
#include <QApplication>
#include <QMessageBox>
#include <QCloseEvent>
#include <QSettings>
#include <QLoggingCategory>
#include <QMutex>
#include <QMutexLocker>
#include <QDateTime>
#include <QTimer>
#include <QSystemTrayIcon>
#include <QIcon>
#include <QKeySequence>
#include <QEvent>
#include <QThread>

Q_LOGGING_CATEGORY(adminWindow, "qkchat.server.admin.adminwindow")

AdminWindow::AdminWindow(QWidget *parent)
    : QMainWindow(parent)
    , _tabWidget(nullptr)
    , _isDarkTheme(false)
    , _isServerRunning(false)
{
    setupUI();
    setupMenuBar();
    setupStatusBar();
    setupSystemTray();
    setupConnections();
    
    // ÁßªÈô§Êï∞ÊçÆÂ∫ìÂàùÂßãÂåñÔºåÈÅøÂÖçÈáçÂ§çÂàùÂßãÂåñ
    // Êï∞ÊçÆÂ∫ìÂ∞ÜÁî±ChatServerÁªü‰∏ÄÁÆ°ÁêÜ
    // _database = new Database(this);
    // _database->initialize();
    
    // Âä†ËΩΩËÆæÁΩÆ
    loadSettings();
    updateTheme();
    
    // ÂêØÂä®Áä∂ÊÄÅÊõ¥Êñ∞ËÆ°Êó∂Âô®
    _statusUpdateTimer = new QTimer(this);
    _statusUpdateTimer->setInterval(1000); // 1ÁßíÊõ¥Êñ∞‰∏ÄÊ¨°ÔºåÁ°Æ‰øùËøêË°åÊó∂Èó¥ÂÆûÊó∂Êõ¥Êñ∞
    connect(_statusUpdateTimer, &QTimer::timeout, this, &AdminWindow::updateServerStatus);
    _statusUpdateTimer->start();
    
    qCInfo(adminWindow) << "Admin window initialized";
}

AdminWindow::~AdminWindow()
{
    saveSettings();
}

void AdminWindow::setChatServer(ChatServer* chatServer)
{
    try {
        qCInfo(adminWindow) << "Setting ChatServer for AdminWindow";
        
        // Á°Æ‰øùÂú®‰∏ªÁ∫øÁ®ã‰∏≠ÊâßË°å
        if (QThread::currentThread() != qApp->thread()) {
            qCWarning(adminWindow) << "setChatServer called from non-main thread, moving to main thread";
            QMetaObject::invokeMethod(this, [this, chatServer]() {
                setChatServer(chatServer);
            }, Qt::QueuedConnection);
            return;
        }
        
        _chatServer = chatServer;
        
        if (_chatServer) {
            // Ê£ÄÊü•ÊúçÂä°Âô®ÊòØÂê¶Ê≠£Âú®ËøêË°å
            bool serverRunning = false;
            try {
                serverRunning = _chatServer->isRunning();
            } catch (const std::exception& e) {
                qCWarning(adminWindow) << "Exception checking server running status:" << e.what();
                serverRunning = false;
            } catch (...) {
                qCWarning(adminWindow) << "Unknown exception checking server running status";
                serverRunning = false;
            }
            
            if (serverRunning) {
                qCInfo(adminWindow) << "Server is running, setting up UI immediately";
                
                // ËÆæÁΩÆDashboardWidgetÁöÑChatServer
                if (_dashboardWidget) {
                    _dashboardWidget->setChatServer(_chatServer);
                    qCInfo(adminWindow) << "ChatServer set for DashboardWidget";
                }
                
                // Á´ãÂç≥Êõ¥Êñ∞‰∏ÄÊ¨°ÊúçÂä°Âô®Áä∂ÊÄÅ
                updateServerStatus();
                
                // ÂêØÂä®ÊúçÂä°Âô®Áä∂ÊÄÅÊõ¥Êñ∞ÂÆöÊó∂Âô®
                if (_statusUpdateTimer) {
                    _statusUpdateTimer->start(1000); // ÊØèÁßíÊõ¥Êñ∞‰∏ÄÊ¨°
                }
            } else {
                qCInfo(adminWindow) << "Server is not running yet, will setup UI later";
                
                // ËÆæÁΩÆÈªòËÆ§Áä∂ÊÄÅ
                if (_serverStatusLabel) {
                    _serverStatusLabel->setText("ÊúçÂä°Âô®Áä∂ÊÄÅ: ÂêØÂä®‰∏≠");
                    _serverStatusLabel->setStyleSheet("color: orange; font-weight: bold;");
                }
                if (_onlineUsersLabel) _onlineUsersLabel->setText("Âú®Á∫øÁî®Êà∑: 0");
                if (_connectionCountLabel) _connectionCountLabel->setText("ËøûÊé•Êï∞: 0");
                if (_uptimeLabel) _uptimeLabel->setText("ËøêË°åÊó∂Èó¥: 00:00:00");
                
                // Âª∂ËøüËÆæÁΩÆDashboardWidgetÔºåÁ≠âÂæÖÊúçÂä°Âô®ÂêØÂä®
                QTimer::singleShot(2000, this, [this]() {
                    if (_dashboardWidget && _chatServer) {
                        _dashboardWidget->setChatServer(_chatServer);
                        qCInfo(adminWindow) << "ChatServer set for DashboardWidget (delayed)";
                    }
                });
                
                // Âª∂ËøüÂêØÂä®Áä∂ÊÄÅÊõ¥Êñ∞ÂÆöÊó∂Âô®
                QTimer::singleShot(3000, this, [this]() {
                    if (_statusUpdateTimer) {
                        _statusUpdateTimer->start(1000); // ÊØèÁßíÊõ¥Êñ∞‰∏ÄÊ¨°
                    }
                });
            }
        } else {
            qCWarning(adminWindow) << "ChatServer is null";
        }
        
    } catch (const std::exception& e) {
        qCWarning(adminWindow) << "Exception in setChatServer:" << e.what();
    } catch (...) {
        qCWarning(adminWindow) << "Unknown exception in setChatServer";
    }
}

void AdminWindow::setupUI()
{
    setWindowTitle("QK Chat ÊúçÂä°Âô®ÁÆ°ÁêÜ");
    setMinimumSize(1200, 800);
    resize(1400, 900);
    
    // ÂàõÂª∫‰∏≠Â§ÆÊ†áÁ≠æÈ°µÁªÑ‰ª∂
    _tabWidget = new QTabWidget(this);
    setCentralWidget(_tabWidget);
    
    // ÂàõÂª∫ÂêÑ‰∏™ÂäüËÉΩÊ®°Âùó
    _dashboardWidget = new DashboardWidget(this);
    // _userManagerWidget = new UserManagerWidget(this);
    // _systemConfigWidget = new SystemConfigWidget(this);
    // _logViewerWidget = new LogViewerWidget(this);
    // _monitorWidget = new MonitorWidget(this);
    
    // Ê∑ªÂä†Ê†áÁ≠æÈ°µ
    _tabWidget->addTab(_dashboardWidget, "üìä ‰ª™Ë°®Êùø");
    // _tabWidget->addTab(_monitorWidget, "üìà ÂÆûÊó∂ÁõëÊéß");
    // _tabWidget->addTab(_userManagerWidget, "üë• Áî®Êà∑ÁÆ°ÁêÜ");
    // _tabWidget->addTab(_systemConfigWidget, "‚öôÔ∏è Á≥ªÁªüÈÖçÁΩÆ");
    // _tabWidget->addTab(_logViewerWidget, "üìã Êó•ÂøóÊü•Áúã");
    
    // ËÆæÁΩÆÊ†áÁ≠æÈ°µÊ†∑Âºè
    _tabWidget->setTabPosition(QTabWidget::North);
    _tabWidget->setUsesScrollButtons(true);
    _tabWidget->setElideMode(Qt::ElideNone);
}

void AdminWindow::setupMenuBar()
{
    // ÊúçÂä°Âô®ËèúÂçï
    QMenu *serverMenu = menuBar()->addMenu("ÊúçÂä°Âô®(&S)");
    
    _startServerAction = new QAction("ÂêØÂä®ÊúçÂä°Âô®(&S)", this);
    _startServerAction->setShortcut(QKeySequence("Ctrl+S"));
    _startServerAction->setIcon(QIcon(":/icons/start.png"));
    connect(_startServerAction, &QAction::triggered, this, [this]() {
        if (_chatServer) {
            _chatServer->startServer();
        }
    });
    
    _stopServerAction = new QAction("ÂÅúÊ≠¢ÊúçÂä°Âô®(&T)", this);
    _stopServerAction->setShortcut(QKeySequence("Ctrl+T"));
    _stopServerAction->setIcon(QIcon(":/icons/stop.png"));
    _stopServerAction->setEnabled(false);
    connect(_stopServerAction, &QAction::triggered, this, [this]() {
        if (_chatServer) {
            _chatServer->stopServer();
        }
    });
    
    _restartServerAction = new QAction("ÈáçÂêØÊúçÂä°Âô®(&R)", this);
    _restartServerAction->setShortcut(QKeySequence("Ctrl+R"));
    _restartServerAction->setIcon(QIcon(":/icons/restart.png"));
    _restartServerAction->setEnabled(false);
    connect(_restartServerAction, &QAction::triggered, this, [this]() {
        if (_chatServer) {
            _chatServer->restartServer();
        }
    });
    
    serverMenu->addAction(_startServerAction);
    serverMenu->addAction(_stopServerAction);
    serverMenu->addAction(_restartServerAction);
    serverMenu->addSeparator();
    
    _minimizeToTrayAction = new QAction("ÊúÄÂ∞èÂåñÂà∞ÊâòÁõò(&M)", this);
    _minimizeToTrayAction->setShortcut(QKeySequence("Ctrl+M"));
    connect(_minimizeToTrayAction, &QAction::triggered, this, &AdminWindow::hideToTray);
    serverMenu->addAction(_minimizeToTrayAction);
    
    serverMenu->addSeparator();
    
    _exitAction = new QAction("ÈÄÄÂá∫(&X)", this);
    _exitAction->setShortcut(QKeySequence("Ctrl+Q"));
    _exitAction->setIcon(QIcon(":/icons/exit.png"));
    connect(_exitAction, &QAction::triggered, this, &AdminWindow::exitApplication);
    serverMenu->addAction(_exitAction);
    
    // ËßÜÂõæËèúÂçï
    QMenu *viewMenu = menuBar()->addMenu("ËßÜÂõæ(&V)");
    
    _themeAction = new QAction("ÂàáÊç¢‰∏ªÈ¢ò(&T)", this);
    _themeAction->setShortcut(QKeySequence("Ctrl+Shift+T"));
    connect(_themeAction, &QAction::triggered, this, &AdminWindow::toggleTheme);
    viewMenu->addAction(_themeAction);
    
    // Â∏ÆÂä©ËèúÂçï
    QMenu *helpMenu = menuBar()->addMenu("Â∏ÆÂä©(&H)");
    
    _aboutAction = new QAction("ÂÖ≥‰∫é(&A)", this);
    _aboutAction->setIcon(QIcon(":/icons/about.png"));
    connect(_aboutAction, &QAction::triggered, this, &AdminWindow::showAbout);
    helpMenu->addAction(_aboutAction);
}

void AdminWindow::setupStatusBar()
{
    _serverStatusLabel = new QLabel("ÊúçÂä°Âô®Áä∂ÊÄÅ: Êú™ÂêØÂä®");
    _onlineUsersLabel = new QLabel("Âú®Á∫øÁî®Êà∑: 0");
    _connectionCountLabel = new QLabel("ËøûÊé•Êï∞: 0");
    _uptimeLabel = new QLabel("ËøêË°åÊó∂Èó¥: 00:00:00");
    
    // ËÆæÁΩÆÁä∂ÊÄÅÊ†èÊ†∑ÂºèÔºåÈÅøÂÖçÈáçÂè†
    statusBar()->setStyleSheet("QStatusBar { border: none; background-color: #f0f0f0; }");
    
    // Ê∑ªÂä†ÊúçÂä°Âô®Áä∂ÊÄÅÂà∞Â∑¶‰æß
    statusBar()->addWidget(_serverStatusLabel);
    
    // Ê∑ªÂä†Ê∞∏‰πÖÈÉ®‰ª∂Âà∞Âè≥‰æßÔºå‰ΩøÁî®Âõ∫ÂÆöÂÆΩÂ∫¶ÈÅøÂÖçÈáçÂè†
    _uptimeLabel->setMinimumWidth(150);
    _uptimeLabel->setMaximumWidth(150);
    _connectionCountLabel->setMinimumWidth(100);
    _connectionCountLabel->setMaximumWidth(100);
    _onlineUsersLabel->setMinimumWidth(120);
    _onlineUsersLabel->setMaximumWidth(120);
    
    // ËÆæÁΩÆÊñáÊú¨ÂØπÈΩê
    _uptimeLabel->setAlignment(Qt::AlignRight);
    _connectionCountLabel->setAlignment(Qt::AlignRight);
    _onlineUsersLabel->setAlignment(Qt::AlignRight);
    
    statusBar()->addPermanentWidget(_uptimeLabel);
    statusBar()->addPermanentWidget(_connectionCountLabel);
    statusBar()->addPermanentWidget(_onlineUsersLabel);
    
    // Âà†Èô§Áä∂ÊÄÅÊ†èÊ∂àÊÅØÔºåÈÅøÂÖçÂ∑¶‰∏ãËßíÊòæÁ§∫ÈªëËâ≤ÊñáÂ≠ó
    // statusBar()->showMessage("QK Chat ÊúçÂä°Âô®ÁÆ°ÁêÜÁ≥ªÁªüÂ∑≤Â∞±Áª™");
}

void AdminWindow::setupSystemTray()
{
    if (!QSystemTrayIcon::isSystemTrayAvailable()) {
        return;
    }
    
    _systemTray = new QSystemTrayIcon(this);
    _systemTray->setIcon(QIcon(":/icons/server.png"));
    _systemTray->setToolTip("QK Chat ÊúçÂä°Âô®");
    
    // ÂàõÂª∫ÊâòÁõòËèúÂçï
    _trayMenu = new QMenu(this);
    
    QAction *showAction = new QAction("ÊòæÁ§∫‰∏ªÁ™óÂè£", this);
    connect(showAction, &QAction::triggered, this, &AdminWindow::showWindow);
    _trayMenu->addAction(showAction);
    
    _trayMenu->addSeparator();
    _trayMenu->addAction(_startServerAction);
    _trayMenu->addAction(_stopServerAction);
    _trayMenu->addAction(_restartServerAction);
    
    _trayMenu->addSeparator();
    QAction *exitAction = new QAction("ÈÄÄÂá∫", this);
    connect(exitAction, &QAction::triggered, this, &AdminWindow::exitApplication);
    _trayMenu->addAction(exitAction);
    
    _systemTray->setContextMenu(_trayMenu);
    _systemTray->show();
    
    connect(_systemTray, &QSystemTrayIcon::activated, 
            this, &AdminWindow::onSystemTrayActivated);
}

void AdminWindow::setupConnections()
{
    // Ê†áÁ≠æÈ°µÂàáÊç¢Êó∂Êõ¥Êñ∞Êï∞ÊçÆ
    connect(_tabWidget, &QTabWidget::currentChanged, this, [this](int index) {
        QWidget *currentWidget = _tabWidget->widget(index);
        
        if (currentWidget == _dashboardWidget) {
            _dashboardWidget->refreshData();
        // } else if (currentWidget == _userManagerWidget) {
        //     _userManagerWidget->refreshUserList();
        // } else if (currentWidget == _logViewerWidget) {
        //     _logViewerWidget->refreshLogs();
        // } else if (currentWidget == _monitorWidget) {
        //     _monitorWidget->startMonitoring();
        }
    });
}

void AdminWindow::updateServerStatus()
{
    try {
        // Á°Æ‰øùÂú®‰∏ªÁ∫øÁ®ã‰∏≠ÊâßË°å
        if (QThread::currentThread() != qApp->thread()) {
            qCWarning(adminWindow) << "updateServerStatus called from non-main thread, moving to main thread";
            QMetaObject::invokeMethod(this, "updateServerStatus", Qt::QueuedConnection);
            return;
        }
        
        if (!_chatServer) {
            qCWarning(adminWindow) << "ChatServer object is null";
            if (_serverStatusLabel) {
                _serverStatusLabel->setText("ÊúçÂä°Âô®Áä∂ÊÄÅ: Êú™ÂàùÂßãÂåñ");
                _serverStatusLabel->setStyleSheet("color: orange;");
            }
            if (_onlineUsersLabel) _onlineUsersLabel->setText("Âú®Á∫øÁî®Êà∑: 0");
            if (_connectionCountLabel) _connectionCountLabel->setText("ËøûÊé•Êï∞: 0");
            if (_uptimeLabel) _uptimeLabel->setText("ËøêË°åÊó∂Èó¥: 00:00:00");
            return;
        }

        // Ëé∑ÂèñÊúçÂä°Âô®ËøêË°åÁä∂ÊÄÅ - ‰ΩøÁî®Êõ¥ÂèØÈù†ÁöÑÊñπÊ≥ï
        bool isRunning = false;
        try {
            isRunning = _chatServer->isRunning();
        } catch (const std::exception& e) {
            qCWarning(adminWindow) << "Exception checking server running status:" << e.what();
            isRunning = false;
        } catch (...) {
            qCWarning(adminWindow) << "Unknown exception checking server running status";
            isRunning = false;
        }

        // Êõ¥Êñ∞ÊúçÂä°Âô®Áä∂ÊÄÅÊòæÁ§∫
        if (isRunning) {
            if (_serverStatusLabel) {
                _serverStatusLabel->setText("ÊúçÂä°Âô®Áä∂ÊÄÅ: ËøêË°å‰∏≠");
                _serverStatusLabel->setStyleSheet("color: green; font-weight: bold;");
            }
            if (_startServerAction) _startServerAction->setEnabled(false);
            if (_stopServerAction) _stopServerAction->setEnabled(true);
            if (_restartServerAction) _restartServerAction->setEnabled(true);
        } else {
            if (_serverStatusLabel) {
                _serverStatusLabel->setText("ÊúçÂä°Âô®Áä∂ÊÄÅ: Êú™ÂêØÂä®");
                _serverStatusLabel->setStyleSheet("color: red; font-weight: bold;");
            }
            if (_startServerAction) _startServerAction->setEnabled(true);
            if (_stopServerAction) _stopServerAction->setEnabled(false);
            if (_restartServerAction) _restartServerAction->setEnabled(false);
        }

        // Êõ¥Êñ∞ÁºìÂ≠òÁä∂ÊÄÅ
        _isServerRunning = isRunning;
        
        if (isRunning) {
            // Êõ¥Êñ∞Âú®Á∫øÁî®Êà∑Êï∞
            int onlineUsers = 0;
            try {
                onlineUsers = _chatServer->getOnlineUserCount();
            } catch (const std::exception& e) {
                qCWarning(adminWindow) << "Exception getting online user count:" << e.what();
                onlineUsers = 0;
            } catch (...) {
                qCWarning(adminWindow) << "Unknown exception getting online user count";
                onlineUsers = 0;
            }
            
            if (_onlineUsersLabel) {
                _onlineUsersLabel->setText(QString("Âú®Á∫øÁî®Êà∑: %1").arg(onlineUsers));
            }
            
            // Êõ¥Êñ∞ËøûÊé•Êï∞
            int connections = 0;
            try {
                connections = _chatServer->getConnectionCount();
            } catch (const std::exception& e) {
                qCWarning(adminWindow) << "Exception getting connection count:" << e.what();
                connections = 0;
            } catch (...) {
                qCWarning(adminWindow) << "Unknown exception getting connection count";
                connections = 0;
            }
            
            if (_connectionCountLabel) {
                _connectionCountLabel->setText(QString("ËøûÊé•Êï∞: %1").arg(connections));
            }
            
            // Êõ¥Êñ∞ËøêË°åÊó∂Èó¥ - Áõ¥Êé•‰ªéChatServerËé∑ÂèñÔºåÁ°Æ‰øùÂÆûÊó∂ÊÄß
            if (_uptimeLabel) {
                try {
                    QString uptime = _chatServer->getUptime();
                    _uptimeLabel->setText(QString("ËøêË°åÊó∂Èó¥: %1").arg(uptime));
                } catch (const std::exception& e) {
                    qCWarning(adminWindow) << "Exception getting uptime:" << e.what();
                    // Â¶ÇÊûúËé∑ÂèñÂ§±Ë¥•Ôºå‰ΩøÁî®Êú¨Âú∞ËÆ°ÁÆóÁöÑÊó∂Èó¥‰Ωú‰∏∫Â§áÁî®
                    if (!_serverStartTime.isNull()) {
                        qint64 seconds = _serverStartTime.secsTo(QDateTime::currentDateTime());
                        int hours = seconds / 3600;
                        int minutes = (seconds % 3600) / 60;
                        int secs = seconds % 60;

                        _uptimeLabel->setText(QString("ËøêË°åÊó∂Èó¥: %1:%2:%3")
                                             .arg(hours, 2, 10, QChar('0'))
                                             .arg(minutes, 2, 10, QChar('0'))
                                             .arg(secs, 2, 10, QChar('0')));
                    } else {
                        _uptimeLabel->setText("ËøêË°åÊó∂Èó¥: 00:00:00");
                    }
                } catch (...) {
                    qCWarning(adminWindow) << "Unknown exception getting uptime";
                    _uptimeLabel->setText("ËøêË°åÊó∂Èó¥: 00:00:00");
                }
            }
        } else {
            if (_onlineUsersLabel) _onlineUsersLabel->setText("Âú®Á∫øÁî®Êà∑: 0");
            if (_connectionCountLabel) _connectionCountLabel->setText("ËøûÊé•Êï∞: 0");
            if (_uptimeLabel) _uptimeLabel->setText("ËøêË°åÊó∂Èó¥: 00:00:00");
        }
    } catch (const std::exception& e) {
        qCWarning(adminWindow) << "Exception in updateServerStatus:" << e.what();
    } catch (...) {
        qCWarning(adminWindow) << "Unknown exception in updateServerStatus";
    }
}

void AdminWindow::onServerStarted()
{
    // Â¶ÇÊûúÊúçÂä°Âô®ÂêØÂä®Êó∂Èó¥ËøòÊ≤°ÊúâËÆæÁΩÆÔºå‰ΩøÁî®ÂΩìÂâçÊó∂Èó¥
    if (_serverStartTime.isNull()) {
        _serverStartTime = QDateTime::currentDateTime();
    }
    _isServerRunning = true;

    // ÂêØÂä®DashboardWidgetÁöÑÁªüËÆ°‰ø°ÊÅØÊõ¥Êñ∞
    if (_dashboardWidget) {
        _dashboardWidget->setChatServer(_chatServer);
    }

    // Á´ãÂç≥Êõ¥Êñ∞‰∏ÄÊ¨°ÊúçÂä°Âô®Áä∂ÊÄÅÊòæÁ§∫
    updateServerStatus();

    statusBar()->showMessage("ÊúçÂä°Âô®ÂêØÂä®ÊàêÂäü", 3000);

    if (_systemTray) {
        _systemTray->showMessage("QK Chat ÊúçÂä°Âô®", "ÊúçÂä°Âô®ÂêØÂä®ÊàêÂäü",
                                QSystemTrayIcon::Information, 3000);
    }

    qCInfo(adminWindow) << "Server started successfully";
}

void AdminWindow::onServerStopped()
{
    _isServerRunning = false;
    _serverStartTime = QDateTime();
    
    statusBar()->showMessage("ÊúçÂä°Âô®Â∑≤ÂÅúÊ≠¢", 3000);
    
    if (_systemTray) {
        _systemTray->showMessage("QK Chat ÊúçÂä°Âô®", "ÊúçÂä°Âô®Â∑≤ÂÅúÊ≠¢", 
                                QSystemTrayIcon::Warning, 3000);
    }
    
    qCInfo(adminWindow) << "Server stopped";
}

void AdminWindow::onServerError(const QString &error)
{
    statusBar()->showMessage("ÊúçÂä°Âô®ÈîôËØØ: " + error, 5000);
    
    QMessageBox::critical(this, "ÊúçÂä°Âô®ÈîôËØØ", error);
    
    if (_systemTray) {
        _systemTray->showMessage("QK Chat ÊúçÂä°Âô®", "ÊúçÂä°Âô®ÈîôËØØ: " + error, 
                                QSystemTrayIcon::Critical, 5000);
    }
    
    qCCritical(adminWindow) << "Server error:" << error;
}

void AdminWindow::showAbout()
{
    QMessageBox::about(this, "ÂÖ≥‰∫é QK Chat ÊúçÂä°Âô®", 
                      "QK Chat ÊúçÂä°Âô®ÁÆ°ÁêÜÁ≥ªÁªü\n\n"
                      "ÁâàÊú¨: 1.0.0\n"
                      "Âü∫‰∫é Qt 6 Ê°ÜÊû∂ÂºÄÂèë\n\n"
                      "ÂäüËÉΩÁâπÊÄß:\n"
                      "‚Ä¢ ÂÆûÊó∂ÁõëÊéßÊúçÂä°Âô®Áä∂ÊÄÅ\n"
                      "‚Ä¢ Áî®Êà∑ÁÆ°ÁêÜÂíåÊùÉÈôêÊéßÂà∂\n"
                      "‚Ä¢ Á≥ªÁªüÈÖçÁΩÆÂíåÊó•ÂøóÊü•Áúã\n"
                      "‚Ä¢ Áé∞‰ª£ÂåñÁÆ°ÁêÜÁïåÈù¢\n\n"
                      "Copyright ¬© 2024 QK Team");
}

void AdminWindow::toggleTheme()
{
    _isDarkTheme = !_isDarkTheme;
    updateTheme();
    saveSettings();
}

void AdminWindow::updateTheme()
{
    QString styleSheet;
    
    if (_isDarkTheme) {
        // Ê∑±Ëâ≤‰∏ªÈ¢ò
        styleSheet = R"(
            QMainWindow {
                background-color: #2b2b2b;
                color: #ffffff;
            }
            QTabWidget::pane {
                border: 1px solid #555555;
                background-color: #3c3c3c;
            }
            QTabWidget::tab-bar {
                alignment: center;
            }
            QTabBar::tab {
                background-color: #555555;
                color: #ffffff;
                padding: 8px 16px;
                margin: 2px;
                border-radius: 4px;
            }
            QTabBar::tab:selected {
                background-color: #0078d4;
            }
            QTabBar::tab:hover {
                background-color: #666666;
            }
            QMenuBar {
                background-color: #3c3c3c;
                color: #ffffff;
                border-bottom: 1px solid #555555;
            }
            QMenuBar::item {
                background-color: transparent;
                padding: 4px 8px;
            }
            QMenuBar::item:selected {
                background-color: #0078d4;
                border-radius: 4px;
            }
            QMenu {
                background-color: #3c3c3c;
                color: #ffffff;
                border: 1px solid #555555;
            }
            QMenu::item {
                padding: 6px 16px;
            }
            QMenu::item:selected {
                background-color: #0078d4;
            }
            QStatusBar {
                background-color: #3c3c3c;
                color: #ffffff;
                border-top: 1px solid #555555;
            }
        )";
        
        _themeAction->setText("ÂàáÊç¢Âà∞ÊµÖËâ≤‰∏ªÈ¢ò");
    } else {
        // ÊµÖËâ≤‰∏ªÈ¢ò
        styleSheet = R"(
            QMainWindow {
                background-color: #ffffff;
                color: #000000;
            }
            QTabWidget::pane {
                border: 1px solid #cccccc;
                background-color: #ffffff;
            }
            QTabBar::tab {
                background-color: #f0f0f0;
                color: #000000;
                padding: 8px 16px;
                margin: 2px;
                border-radius: 4px;
                border: 1px solid #cccccc;
            }
            QTabBar::tab:selected {
                background-color: #0078d4;
                color: #ffffff;
            }
            QTabBar::tab:hover {
                background-color: #e5e5e5;
            }
            QMenuBar {
                background-color: #f8f9fa;
                color: #000000;
                border-bottom: 1px solid #dee2e6;
            }
            QMenuBar::item {
                background-color: transparent;
                padding: 4px 8px;
            }
            QMenuBar::item:selected {
                background-color: #0078d4;
                color: #ffffff;
                border-radius: 4px;
            }
            QMenu {
                background-color: #ffffff;
                color: #000000;
                border: 1px solid #cccccc;
            }
            QMenu::item {
                padding: 6px 16px;
            }
            QMenu::item:selected {
                background-color: #0078d4;
                color: #ffffff;
            }
            QStatusBar {
                background-color: #f8f9fa;
                color: #000000;
                border-top: 1px solid #dee2e6;
            }
        )";
        
        _themeAction->setText("ÂàáÊç¢Âà∞Ê∑±Ëâ≤‰∏ªÈ¢ò");
    }
    
    setStyleSheet(styleSheet);
    
    // Êõ¥Êñ∞ÂêÑ‰∏™Â≠êÁªÑ‰ª∂ÁöÑ‰∏ªÈ¢ò
    try {
        if (_dashboardWidget) {
            _dashboardWidget->updateTheme(_isDarkTheme);
        }
        // _userManagerWidget->updateTheme(_isDarkTheme);
        // _systemConfigWidget->updateTheme(_isDarkTheme);
        // _logViewerWidget->updateTheme(_isDarkTheme);
        // _monitorWidget->updateTheme(_isDarkTheme);
    } catch (const std::exception& e) {
        qCWarning(adminWindow) << "Exception in updateTheme:" << e.what();
    } catch (...) {
        qCWarning(adminWindow) << "Unknown exception in updateTheme";
    }
}

void AdminWindow::onSystemTrayActivated(QSystemTrayIcon::ActivationReason reason)
{
    if (reason == QSystemTrayIcon::DoubleClick) {
        showWindow();
    }
}

void AdminWindow::showWindow()
{
    show();
    raise();
    activateWindow();
}

void AdminWindow::hideToTray()
{
    if (QSystemTrayIcon::isSystemTrayAvailable()) {
        hide();
        if (_systemTray) {
            _systemTray->showMessage("QK Chat ÊúçÂä°Âô®", "Â∫îÁî®Á®ãÂ∫èÂ∑≤ÊúÄÂ∞èÂåñÂà∞Á≥ªÁªüÊâòÁõò", 
                                    QSystemTrayIcon::Information, 2000);
        }
    }
}

void AdminWindow::exitApplication()
{
    if (_chatServer && _chatServer->isRunning()) {
        int ret = QMessageBox::question(this, "Á°ÆËÆ§ÈÄÄÂá∫", 
                                       "ÊúçÂä°Âô®Ê≠£Âú®ËøêË°å‰∏≠ÔºåÁ°ÆÂÆöË¶ÅÈÄÄÂá∫ÂêóÔºü",
                                       QMessageBox::Yes | QMessageBox::No,
                                       QMessageBox::No);
        
        if (ret == QMessageBox::No) {
            return;
        }
        
        // ÂÅúÊ≠¢ÊúçÂä°Âô®
        _chatServer->stopServer();
        
        // Á≠âÂæÖÊúçÂä°Âô®ÂÅúÊ≠¢
        QTimer::singleShot(1000, [this]() {
            saveSettings();
            QApplication::quit();
        });
    } else {
        saveSettings();
        QApplication::quit();
    }
}

void AdminWindow::loadSettings()
{
    QSettings settings;
    
    // Âä†ËΩΩÁ™óÂè£Âá†‰Ωï‰ø°ÊÅØ
    restoreGeometry(settings.value("admin/geometry").toByteArray());
    restoreState(settings.value("admin/windowState").toByteArray());
    
    // Âä†ËΩΩ‰∏ªÈ¢òËÆæÁΩÆ
    _isDarkTheme = settings.value("admin/dark_theme", false).toBool();
    
    // Âä†ËΩΩÂΩìÂâçÊ†áÁ≠æÈ°µ
    int currentTab = settings.value("admin/current_tab", 0).toInt();
    if (currentTab >= 0 && currentTab < _tabWidget->count()) {
        _tabWidget->setCurrentIndex(currentTab);
    }
}

void AdminWindow::saveSettings()
{
    QSettings settings;
    
    // ‰øùÂ≠òÁ™óÂè£Âá†‰Ωï‰ø°ÊÅØ
    settings.setValue("admin/geometry", saveGeometry());
    settings.setValue("admin/windowState", saveState());
    
    // ‰øùÂ≠ò‰∏ªÈ¢òËÆæÁΩÆ
    settings.setValue("admin/dark_theme", _isDarkTheme);
    
    // ‰øùÂ≠òÂΩìÂâçÊ†áÁ≠æÈ°µ
    settings.setValue("admin/current_tab", _tabWidget->currentIndex());
}

void AdminWindow::closeEvent(QCloseEvent *event)
{
    if (QSystemTrayIcon::isSystemTrayAvailable() && _systemTray) {
        hideToTray();
        event->ignore();
    } else {
        // ËØ¢ÈóÆÁî®Êà∑ÊòØÂê¶Á°ÆÂÆöË¶ÅÈÄÄÂá∫
        int ret = QMessageBox::question(this, "Á°ÆËÆ§ÈÄÄÂá∫", 
                                       "Á°ÆÂÆöË¶ÅÈÄÄÂá∫QK ChatÊúçÂä°Âô®ÂêóÔºü",
                                       QMessageBox::Yes | QMessageBox::No,
                                       QMessageBox::No);
        
        if (ret == QMessageBox::Yes) {
            exitApplication();
            event->accept();
        } else {
            event->ignore();
        }
    }
}

void AdminWindow::changeEvent(QEvent *event)
{
    if (event->type() == QEvent::WindowStateChange) {
        if (isMinimized() && QSystemTrayIcon::isSystemTrayAvailable()) {
            hideToTray();
        }
    }
    
    QMainWindow::changeEvent(event);
} 